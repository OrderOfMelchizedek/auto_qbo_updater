name: CI

on:
  push:
    branches: [ master, main, develop, heroku-deployment ]
  pull_request:
    branches: [ master, main, heroku-deployment ]

env:
  PYTHON_VERSION: '3.13'

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          libmupdf-dev \
          mupdf-tools \
          libfreetype6-dev \
          libharfbuzz-dev \
          libjpeg-dev \
          libopenjp2-7-dev \
          libpng-dev \
          libtiff-dev \
          libgumbo-dev \
          libxml2-dev \
          libxslt-dev \
          poppler-utils

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements/*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip wheel
        pip install -r requirements/dev.txt

    - name: Run flake8
      run: |
        # Use our .flake8 configuration file for all checks
        flake8 src tests

    - name: Run black
      run: |
        black --check src tests

    - name: Run isort
      run: |
        isort --check-only src tests

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: lint

    strategy:
      matrix:
        python-version: ['3.11', '3.12', '3.13']

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          libmupdf-dev \
          mupdf-tools \
          libfreetype6-dev \
          libharfbuzz-dev \
          libjpeg-dev \
          libopenjp2-7-dev \
          libpng-dev \
          libtiff-dev \
          libgumbo-dev \
          libxml2-dev \
          libxslt-dev \
          poppler-utils

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('requirements/*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip wheel
        pip install -r requirements/test.txt

    - name: Set up environment
      run: |
        cp .env.example .env
        # Set test environment variables
        echo "FLASK_SECRET_KEY=test-secret-key" >> .env
        echo "GEMINI_API_KEY=test-gemini-key" >> .env
        echo "QBO_CLIENT_ID=test-client-id" >> .env
        echo "QBO_CLIENT_SECRET=test-client-secret" >> .env
        echo "QBO_REDIRECT_URI=http://localhost/callback" >> .env

    - name: Run unit tests
      run: |
        PYTHONPATH=src pytest tests/unit -v --cov=src --cov-report=xml --cov-report=html

    - name: Run integration tests
      run: |
        PYTHONPATH=src pytest tests/integration -v

    - name: Upload coverage to Codecov
      if: matrix.python-version == '3.13'
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: lint

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety

    - name: Run bandit
      run: |
        # Run bandit with our configuration
        bandit -r src -f json -o bandit-report.json || true

        # Check for high severity issues (must fix)
        HIGH_COUNT=$(jq '[.results[] | select(.issue_severity == "HIGH")] | length' bandit-report.json)

        # Check for medium severity issues (should fix)
        MEDIUM_COUNT=$(jq '[.results[] | select(.issue_severity == "MEDIUM")] | length' bandit-report.json)

        echo "Security scan results:"
        echo "  High severity issues: $HIGH_COUNT"
        echo "  Medium severity issues: $MEDIUM_COUNT"

        # Display any high severity issues
        if [ "$HIGH_COUNT" -gt 0 ]; then
          echo ""
          echo "❌ HIGH SEVERITY ISSUES FOUND:"
          jq -r '.results[] | select(.issue_severity == "HIGH") | "  \(.filename):\(.line_number) - \(.issue_text)"' bandit-report.json
          echo ""
          echo "High severity issues must be fixed before deployment!"
          exit 1
        fi

        # Display medium severity issues as warnings
        if [ "$MEDIUM_COUNT" -gt 0 ]; then
          echo ""
          echo "⚠️  MEDIUM SEVERITY ISSUES FOUND (should be addressed):"
          jq -r '.results[] | select(.issue_severity == "MEDIUM") | "  \(.filename):\(.line_number) - \(.issue_text)"' bandit-report.json
        fi

        echo ""
        echo "✅ No high severity security issues found!"

    - name: Run safety check
      run: |
        pip install -r requirements/prod.txt
        safety check --json > safety-report.json || true

    - name: Upload security reports
      uses: actions/upload-artifact@v4
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  build:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main')

    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/fom-qbo-automation:latest
          ${{ secrets.DOCKER_USERNAME }}/fom-qbo-automation:${{ github.sha }}
        cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/fom-qbo-automation:buildcache
        cache-to: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/fom-qbo-automation:buildcache,mode=max

  deploy:
    name: Deploy to Heroku
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/heroku-deployment')

    steps:
    - uses: actions/checkout@v4

    - name: Install Heroku CLI
      run: |
        curl https://cli-assets.heroku.com/install.sh | sh

    - name: Deploy to Heroku
      env:
        HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
      run: |
        # Add Heroku remote
        heroku git:remote -a ${{ secrets.HEROKU_APP_NAME }} || echo "Remote might already exist"

        # Set buildpack if not already set
        heroku buildpacks:set heroku/python -a ${{ secrets.HEROKU_APP_NAME }} || echo "Buildpack might already be set"

        # Deploy
        git push heroku heroku-deployment:main --force

        # Run release phase if Procfile has release command
        if grep -q "release:" Procfile; then
          echo "Running release phase..."
          heroku run release -a ${{ secrets.HEROKU_APP_NAME }}
        fi

        # Health check
        echo "Waiting 30 seconds for app to start..."
        sleep 30

        echo "Performing health check..."
        HEALTH_STATUS=$(curl -s -o /dev/null -w "%{http_code}" https://${{ secrets.HEROKU_APP_NAME }}.herokuapp.com/health)

        if [ "$HEALTH_STATUS" = "200" ]; then
          echo "✅ Health check passed!"
          HEALTH_RESPONSE=$(curl -s https://${{ secrets.HEROKU_APP_NAME }}.herokuapp.com/health)
          if [[ "$HEALTH_RESPONSE" == *"healthy"* ]]; then
            echo "✅ App is healthy!"
          else
            echo "❌ Health check response doesn't contain 'healthy'"
            echo "Response: $HEALTH_RESPONSE"
            exit 1
          fi
        else
          echo "❌ Health check failed with status: $HEALTH_STATUS"
          exit 1
        fi
